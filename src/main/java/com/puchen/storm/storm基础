storm应用场景
推荐系统：实时推荐，根据下单或者计入购物车推荐相关商品（而不是相似商品）
金融系统
预警系统
网站统计：实时销量。流量统计，如淘宝双11效果图

试想一下你自己实现实时计算的方案？
数据源务必实时，所以采用的message queue作为数据源，消息处理comsumer
实时从MQ获取数据进行处理，返回结果到web或写DB
这种方式有一下几个缺点：
1.单机模式，能处理的数据量有限
2.不健壮，服务器挂掉即结束。而storm集群节点挂掉都，任务会重新分配给其他节点，作业不受影响
3.失败重试，事务等。你需要在代码上进行控制，过多精力放在业务开发之外
4.伸缩性查：当一个消息矗立着的消息量达到阈值，你需要对这些数据进行分流，
需要配置这些新的处理者以让他们处理分流的消息。

storm的一些关键特性
1.使用场景广泛：storm可以实时处理消息和更新DB，对一个数据量进行持续的查询并返回客户端(持续计算)，
对一个消耗资源的查询作实时并行化的处理(分布式方法调用，即DRPC)，storm的这些基础API可以满足大量的场景。
2.可伸缩性高：storm的柯伸缩性可以让storm美妙可以处理的消息量达到很高，扩展一个实时计算任务，你锁需要做的
就是加机器并且提高这个计算任务的并行度。storm使用zookeeper老协调集群内的各种配置是的storm的集群可以很容易扩展。
3.保证无数据丢失：实时凶弹个必须保证所有的数据被成功的处理。那些会丢失是数据的系统的使用场景非常窄，
而storm办证每一条消息都会被处理，这一点和S4相比有巨大的反差。
4.异常健壮：storm集群非常容易管理，轮流重启节点不影响应用
5.容错性好：在消息处理过程中出现异常，storm会进行重试
6.语言无关性;storm的topology和消息处理组件(Bolt)可以用任何语言来定义，这一点是的人个人都可以使用storm。

进阶编程，storm trident编程
storm trident是基础原生storm API的高级封装，类似于Mapreduce的PIG框架，让我们开发高并发，批处理实时需求更加放心快捷。
TridentAPI及众多概念详解
Trident state，spout，bolt
场景案例实战

storm概念
                        主节点         工作节点        作业
            storm       Nimbus      supervisor    topologies(拓扑)，死循环
            hadoop      JObtracker  Tasktracker   mapreduce job 执行完自动结束
NImbus和supervisors之间所有的协调工作是通过一个Zookeeper集群
Nimbus进程和supervisors进程是无法直接连接和无状态的，所有的状态维持在Zookeeper中或者保存在本地磁盘上
这以为这你可以kill -9 Nimbus或者supervisors 而不需要做备份
这种设计导致storm集群具有难以置信的稳定性 即无耦合

Storm工作原理
    Nimbus负责在集群分发的代码，topo只能在nimbus机器上提交，将任务分配给其他机器和故障检测
    supervisor，监听分配给它的节点，根据nimbus的委派在必要时启动和关闭工作进程，每个工作进程执行toplogy的一个子集，一个运行中的toplogy由很多运行在很多机器上的工作进程组成。
    在storm中有对于流stream的抽象，流是一个不间断的无界的连续tuple，注意storm在建模时间流中，把流中的时间抽象为tuple即元组

