{
    "_index":"test_index",
    "_type":"test_type",
    "_id":"1",
    "_version":1,
    "_found":true,
    "_source":{
        "test_content":"test test"
    }
}

1._index元数据
    1)代表一个documnet存放在那个index中
    2)类似的数据放在一个索引，非类似的数据放不同索引
     product index(包含了所有商品)  sales idnex(包含所有的商品销售数据)
    3)index中包含了很多类似的document ：类似指的就是这个document的fields很大一部分是相同的
    4)索引名称必须是小写的，不能用下划线开头，不能包含逗号
2._type元数据
    1)代表document属于idnex中的那个类别（type）
    2)一个索引通常会划分为多个type，逻辑上对index中有些许不同的积累数据进行分类
    3)type名称可以是大写或者小写，但是同时不能用下划线开头，不能包含逗号
3._id元数据
    1)代表document的唯一标识，与index和type一起，可以唯一标识和定位一个document
    2)我们可以手动指定document的id，也可以不指定，有es自动为我们创建一个id



_document id的手动指定和自动生成document id的区别
1.手动指定document_id
(1)根据应用情况来说  是否满足手动指定document id的前提
一般来说 是从某些其他的系统中 导入一些数据到es中 会采取这种方式 就是使用系统中已有的数据的唯一标识，作为es中document的id。举个例子，比如说，我们现在在开发
一个电商网站，做搜索功能或者是OA系统，做员工检索功能。这个时候，数据首先会在网站系统或者IT系统内部的数据库中，会先有一份，此时就肯定会有一个数据库的primary key
（自增长 UUID 或者是业务编号）.如果将数据导入到es中  此时就鼻尖是个曹勇数据在数据库中已有的primary key
如果说 我们是在做一个系统 这个系统主要的数据存储就是es一种，也就是说，数据产生出来以后，可能就没有id，直接就放es一个存储，那么这个时候，可能就不适合手动指定document id
的形式了，因为你也不知道id应该是什么，此时可以此阿勇es自动生成id的方式
(2)put /index/type/id

2.自动生成document id
(1)post /index/type
(2)自动生成的id  长度为20个字符  URL安全  base64编码，GUID 分布式系统并行生成是不可能会发生冲突


1._source元数据
    就是说  我们在创建一个document的时候，使用的那个放在request body中的json串，默认情况下，在get的时候，会原封不动的给我们返回回来。

2.定制返回结果
    定制返回的结果，指定——source中，返回那些field
GET /test_index/test_type/1?_source=test_filed1,test_field2
