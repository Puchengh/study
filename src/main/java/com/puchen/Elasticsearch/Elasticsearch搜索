name	"bmgABm0"   ---名称
cluster_name	"elasticsearch"  ---集群的名称（默认的集群名称是elasticsearch）
cluster_uuid	"0sWlevaLST-Vs7616GNzGA"
version
number	"5.2.0"   ----es的版本号
build_hash	"24e05b9"
build_date	"2017-01-24T19:52:35.800Z"
build_snapshot	false
lucene_version	"6.4.0"
tagline	"You Know, for Search"


商品的CRUD操作（dcocument的CRUD操作）
1.document数据格式
    面向文档的搜索分析引擎
    1)应用系统的数据结构都是面向对象的 复杂的
    2)对象数据存储到数据库中，只能拆解开，变为扁平化的多张表，每次查询的时候还得还原回对象格式，相当麻烦
    3)ES是面向文档的，文档中存储的数据结构，与面向对象的数据结构是一样的，基于这种文档数据结构，ES可以提供负责的索引，分析聚合等功能
    4)es的document用json的数据格式来表达
2.电商网站商品管理案列背景介绍
3.简单的集群管理操作
    （1）快速检查集群的健康状况
    es提供了一套API  叫做cat api  可以查看es中各种各样的数据
    GET /_cat_health?v
    如何快速了解集群的健康状况：green,yellow,red
    green  每个索引的primary shard和replica shard都是active的
    yellow  每个索引的primary shard都是active状态的  但是部分replica shard不是active状态  处于不可用的状态
    red 不是所有索引的primary shard都是active状态的  部分索引有数据丢失了
    为什么现在会处于一个yellow状态？
    只启动了一个es进程  相当于只有一个node  现在es中有一个index 就是kibana自己内置奖励的idnex，
        由于默认的配置是给每个index分配5个primary shard和5个replica shard，而且primary shard和replica shard不能在
        同一台机器上（为了容错），现在kibana自己建立的index是1个primary shard和1个replicashard，当强就一个node，
        所以只有1个primary shard被分配和启动了，但是一个replica shard没有第二台机器去启动

    （2）快速查看集群中有哪些索引
    GET /_cat/indices?v
    health status index   uuid                   pri rep docs.count docs.deleted store.size pri.store.size
    yellow open   .kibana hAbdrPXKSlqWPQP8KKQDZw   1   1          1            0      3.1kb          3.1kb
    （3）简单的索引操作
    创建索引：PUT /test_index?pretty
        health status index      uuid                   pri rep docs.count docs.deleted store.size pri.store.size
        yellow open   .kibana    hAbdrPXKSlqWPQP8KKQDZw   1   1          1            0      3.1kb          3.1kb
        yellow open   test_index 2aBgtgbJTkysho_h-3-33g   5   1          0            0       650b           650b
    删除索引：DELETE /test_index?pretty
        {
          "acknowledged": true
        }
4.商品的CRUD的操作
    (1)新增商品:新增文档 建立索引
        PUT /index/type/id
       es会自动建立index和type 不需要提前创建，而且es默认会对document每个field都建立倒叙排列，让其可以被搜索
    (2)查询商品：替换文档
    GET /ecommerce/product/1
    (3)修改商品，替换文档
    PUT /ecommerce/product/1
    {
        "name":"",
        "desc":"gaolujie meibai",
        "name":30,
        "producer":"gaolujie producer",
        "tags":["meibei","fangzhu"]
    }


多种搜索方式
1.query string search
    搜索全部商品  GET /ecommerce(索引名)/product(type名)/_search
        took:耗费了几毫秒
        timed_out:是否超时，这里是没有
        _shards:数据拆分成了5个分片  所以对于搜索请求 会达到所有的primary_shard(或者是他的扣个replica shard也可以)
        hits.total:查询结果的数量  3个document
        hots.max_score:score的含义  就是document对于一个search的相关度的匹配分数 越相关 就越匹配 分数也高
        hits.hits:包含了匹配搜索的document的详细数据
    query string search的由来 因为search参数都是以http请求的 query string来附带的
    搜索商品名称中包含yagao的商品  而且是按照售价降序排序的
        GET /ecommmerce/product/_search?1=name:yagao&sort=price:desc
    使用与零食在命令行使用一些工具  比如url 快速的发出请求  来检索想要的信息  但是如果查询请求很复杂 是很难构建的
    在生成环境中  几乎很少使用query string search

2.query DSL
    DSL：Domain Specified Language 特定领域的语言
    查询所有的商品
    GET /ecommerce/product/_search
    {
        "query":{
            "match_all":{}
        }
    }
    查询名称包含牙膏的商品 同事按照介个降序排序
    GET /ecommerce/product/_search
    {
        "query":{
            "match":{
                "name":"yagao"
            }
        },
        "sort":[
            {"price":"desc"}
        ]
    }

    分页查询商品
    GET /ecommerce/product/_search
    {
        "query":{"match_all":{}}
        "from":1,
        "size":2
    }
    查询某两个字段
    GET /ecommerce/product/_search
    {
        "query":{"match_all":{}}
        "_source":["name","price"]
    }
    更加适合生产环境的使用 可以构建复杂的查询
3.query filter
    搜索商品名称包含牙膏  而且售价大于25的商品
    GET /ecommerce/product/_seach
    {
        "query":{
            "bool":{
                "must":{
                    "match":{
                        "name":"yagao"
                    }
                }
            },
            "filter":{
                "range":{
                    "price":{"gt":25}
                }
            }
        }
    }
4.full-text search(全文检索)   相关度分数越高 越往前排序   --match
    producer这个字段 会先被拆解 建立倒排索引
    special 4
    yagao 4
    produce 1,2,3,4
    gaolujie 1
    zhonghua 3
    jiajieshi 2
    GET /ecommerce/product/_search
    {
        "query":{
            "mathc":{
                "producer":"yagao producer"
            }
        }
    }
5.phrase search  (短语搜索) (如果匹配不上则就不会返回结果)   --match_prase
    跟全文检索相对应  相反  全文检索会将输入的搜索串拆解开来 去倒排索引去一一匹配，只要能匹配上任意拆解
    的单词，就可以作为结果返回
    phrase search 要求输入的搜索串 必须在指定的字段文本中 完全包含一模一样的  才可以算匹配
    才能作为结果返回

    GET /ecommerce/product/_search
    {
        "query":{
            "match_phrase":{
                "producer":"yagao producer"
            }
        }
    }

6.highlight search (高亮搜索结果)
    GET /ecommerce/product/_search
    {
        "query":{
            "match":{
                "producer":"producer"
            }
        },
        "highlight":{
            "fields":{
                "producer":{}
            }
        }
    }
