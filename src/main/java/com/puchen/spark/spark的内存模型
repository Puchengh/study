spark1.5（包括1.5）的内存模型
    首先使用spark-submit这个脚本去提交任务，更具提交模式的不同，会启动相应的Driver进程
    Driver启动以后回去申请资源，这个申请资源是根据提交的任务脚本参数去申请资源
        1)如果是standonload回去寻找master  然后去找worker worker里面启动了Executor  在回归注册到Driver中
        2)如果是yarn  会去寻找applicationmaster  然后去找resourceManager  然后去找resourceManager分配container container里面启动了executor  executor回归注册到Driver中去
    Driver的代码开始运行，会根据DagScheduaker划分stage，每个stage里面计算靠逻辑一样，只是针对数据不一样，
    taskSet->taskSchedualer,taskSchedualer会把task发送到executor中去

    在1.5版本（包括1.5）之前 内存模型总共分为三个部分  缺点就是当某一个内存不够的时候其他多余的内存不能够补上去
        1）execution  0.2
            1：shuffle的时候使用的是此内存
        2）storage  0.6
            1：持久化的操作会把数据存到内存里面，cache
            2：persist的时候也使用此内存
            2：广播数据的时候，那些数据使用此内存
        3）other   0.2
            1：执行代码的使用的是此内存

    spark.shuffle.memoryFraction  ---> 0.2

    如果发生full GC 会使得大多数的进程停止 则会调整这里的数据

spark2的内存模型  spark1.6.3这个版本比较稳定 推荐使用
    spark21.5以上的内存模型他们三者之间可以相互借用
    spark.memory.fraction 0.75
    spark.memory.storageFraction  0.5
        1）execution  0.25
           1：shuffle的时候使用的是此内存
        2）storage  0.5
           1：持久化的操作会把数据存到内存里面，cache
           2：persist的时候也使用此内存
           3：广播数据的时候，那些数据使用此内存
        3）other   0.25
           1：执行代码的使用的是此内存

Spark资源调优
    ##num-executors
    参数说明：该参数用于设置Spark作业总共要用多少个Executor进程来执行。Driver在向YARN集群管理器申请资源时，YARN集群管理器会尽可能按照你的设置来在集群的各个工作节点上，启动相应数量的Executor进程。
        这个参数非常之重要，如果不设置的话，默认只会给你启动少量的Executor进程，此时你的Spark作业的运行速度是非常慢的。
    参数调优建议：每个Spark作业的运行一般设置50~100个左右的Executor进程比较合适，设置太少或太多的Executor进程都不好。设置的太少，无法充分利用集群资源；设置的太多的话，大部分队列可能无法给予充分的资源。

    ##executor-memory
    参数说明：该参数用于设置每个Executor进程的内存。Executor内存的大小，很多时候直接决定了Spark作业的性能，而且跟常见的JVM OOM异常，也有直接的关联。
    参数调优建议：每个Executor进程的内存设置4G~8G较为合适。但是这只是一个参考值，具体的设置还是得根据不同部门的资源队列来定。
        可以看看自己团队的资源队列的最大内存限制是多少，num-executors乘以executor-memory，是不能超过队列的最大内存量的。此外，如果你是跟团队里其他人共享这个资源队列，那么申请的内存量最好不要超过资源队列最大总内存的1/3~1/2，避免你自己的Spark作业占用了队列所有的资源，导致别的同学的作业无法运行。

    ##executor-cores
    参数说明：该参数用于设置每个Executor进程的CPU core数量。这个参数决定了每个Executor进程并行执行task线程的能力。因为每个CPU core同一时间只能执行一个task线程，因此每个Executor进程的CPU core数量越多，越能够快速地执行完分配给自己的所有task线程。
    参数调优建议：Executor的CPU core数量设置为2~4个较为合适。同样得根据不同部门的资源队列来定，可以看看自己的资源队列的最大CPU core限制是多少，再依据设置的Executor数量，来决定每个Executor进程可以分配到几个CPU core。同样建议，如果是跟他人共享这个队列，
        那么num-executors * executor-cores不要超过队列总CPU core的1/3~1/2左右比较合适，也是避免影响其他同学的作业运行。
    并行度指定task的个数，让一个core对应2-3个task

    ##driver-memory
    参数说明：该参数用于设置Driver进程的内存。
    参数调优建议：Driver的内存通常来说不设置，或者设置1G左右应该就够了。唯一需要注意的一点是，如果需要使用collect算子将RDD的数据全部拉取到Driver上进行处理，那么必须确保Driver的内存足够大，否则会出现OOM内存溢出的问题。
    collect => 拉去到Driver   默认是1G
    client Driver <= exectuor

    ##spark.default.parallelism 并行度  core分配太多 task太少 会造成资源浪费  设置 num-executors * executor-cores的2~3倍
    参数说明：该参数用于设置每个stage的默认task数量。这个参数极为重要，如果不设置可能会直接影响你的Spark作业性能。
    参数调优建议：Spark作业的默认task数量为500~1000个较为合适。很多同学常犯的一个错误就是不去设置这个参数，那么此时就会导致Spark自己根据底层HDFS的block数量来设置task的数量，默认是一个HDFS block对应一个task。通常来说，Spark默认设置的数量是偏少的（比如就几十个task），如果task数量偏少的话，
        就会导致你前面设置好的Executor的参数都前功尽弃。试想一下，无论你的Executor进程有多少个，内存和CPU有多大，但是task只有1个或者10个，那么90%的Executor进程可能根本就没有task执行，也就是白白浪费了资源！因此Spark官网建议的设置原则是，设置该参数为num-executors * executor-cores的2~3倍较为合适，比如Executor的总CPU core数量为300个，那么设置1000个task是可以的，此时可以充分地利用Spark集群的资源。

    ##spark.storage.memoryFraction
    参数说明：该参数用于设置RDD持久化数据在Executor内存中能占的比例，默认是0.6。也就是说，默认Executor 60%的内存，可以用来保存持久化的RDD数据。根据你选择的不同的持久化策略，如果内存不够时，可能数据就不会持久化，或者数据会写入磁盘。
    参数调优建议：如果Spark作业中，有较多的RDD持久化操作，该参数的值可以适当提高一些，保证持久化的数据能够容纳在内存中。避免内存不够缓存所有的数据，导致数据只能写入磁盘中，降低了性能。但是如果Spark作业中的shuffle类操作比较多，而持久化操作比较少，那么这个参数的值适当降低一些比较合适。此外，
        如果发现作业由于频繁的gc导致运行缓慢（通过spark web ui可以观察到作业的gc耗时），意味着task执行用户代码的内存不够用，那么同样建议调低这个参数的值。

    ##spark.shuffle.memoryFraction
    参数说明：该参数用于设置shuffle过程中一个task拉取到上个stage的task的输出后，进行聚合操作时能够使用的Executor内存的比例，默认是0.2。也就是说，Executor默认只有20%的内存用来进行该操作。shuffle操作在进行聚合时，如果发现使用的内存超出了这个20%的限制，那么多余的数据就会溢写到磁盘文件中去，此时就会极大地降低性能。
    参数调优建议：如果Spark作业中的RDD持久化操作较少，shuffle操作较多时，建议降低持久化操作的内存占比，提高shuffle操作的内存占比比例，避免shuffle过程中数据过多时内存不够用，必须溢写到磁盘上，降低了性能。此外，如果发现作业由于频繁的gc导致运行缓慢，意味着task执行用户代码的内存不够用，那么同样建议调低这个参数的值。
    资源参数的调优，没有一个固定的值，需要同学们根据自己的实际情况（包括Spark作业中的shuffle操作数量、RDD持久化操作数量以及spark web ui中显示的作业gc情况），同时参考本篇文章中给出的原理以及调优建议，合理地设置上述参数。

    这是一个spark-submit的参考建议
    ./bin/spark-submit \
      --master yarn-cluster \
      --num-executors 100 \
      --executor-memory 6G \
      --executor-cores 4 \
      --driver-memory 1G \
      --conf spark.default.parallelism=1000 \
      --conf spark.storage.memoryFraction=0.5 \
      --conf spark.shuffle.memoryFraction=0.3 \
Trace跟踪参数
    1 打印GC的简要信息(两个是一样的)
    -XX:+PrintGC
    -verbose:gc
    2 打印GC的详细信息
    -XX:+PrintGCDetails
    3 打印GC发生的时间
    -XX:+PrintGCDateStamps
    4 指定GC的log位置  以文件输出
    -Xloggc:log/gc.log
    5 每一次GC后都打印堆信息
    -XX:=PrintHeapAtGC

堆参数配置
    -Xms:初始堆大小，默认是物理内存的1/64
    -Xmx:最大堆的大小 默认是物理内存的1/4
    -Xmn：新生代的大小 默认是整个堆的3/8
    -XX:NewRatio=n：设置老年代和年轻带的比值。如：为3 年轻代占整个年轻代年老代的1/4
    -XX:SurvivorRatio=n:年轻代Eden区中与两个Survivor区的比值。注意Survivor区有两个
        如：3 表示Eden；Survivor=3:2，一个Survivor区占整个年轻代的1/5
    -XX:MaxPermSize=n:设置持久代的大小(设置永久代大小)
    -X:MzxMetaspaceSize(设置元空间的大小)
    -XX:+HEapDumpOnOutOfMemoryError  参数表示当JVM发生OOM时  自动生成DUMP文件
    -XX：HeapDumpPath=${目录}  参数表示生成的UDMP文件的路径  也可以指定文件名称
栈参数
    -Xss264k
    元空间参数
        -XX：MetaspaceSize,初始空间大小，达到该值就会触发垃圾回收进行类型卸载，同事GC会对该值进行调整
            如果释放大量的空间，就释放降低该值，如果释放了很少的空间，那么在不超过MaxMetspaceSize时，
            适当提高该值
        -XX:MaxMetaspaceSize,最大空间默认是没有限制的

堆内存分析工具  ecplise Memory Analyzer
