多线程
    进程：计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位
        在内存空间中开辟迟来的一个独立的空间  .exe文件
    线程的创建方式：Thread  Runnable  -->重写Run()方法
    多线程运行的原理:
        一个CPU在同一时间片只能执行一个程序(线程,代码)
        时间片：是一个微小的时间段
        多线程就是时间片的争夺，哪个线程获取了时间片就执行哪个线程上的代码
        cpu分配时间片采取的是轮询制的方式
        多线程在本质上不是同时执行的  所以不是并发执行的   但是宏观上看来是同时执行的  但是在微观不是同时执行的
        帧  短时间连续播放很多画面

    线程的状态：
        总共有五种状态
            1)新建状态  新建一个线程
            2)就绪状态 当线程执行start()方法的时候 准备抢占CPU的时间片状态
            3)运行状态 当线程获取到时间片的时候才会到运行状态  抢占到了cpu的时间片
            4)阻塞状态 使运行状态的线程重新回到就绪状态
                Thread.sleep()让线程休眠  不会释放锁标记
                Thread.join(1000)  原理  参数代表执行的是执行时间片的长度  毫秒
                    Thread.join(）线程加入  当你执行一个线程的时候如果遇到其他线程加入，
                             则会先执行加入的线程，直到加入的线程执行完成，才会执行原来线程的任务
                Thread.yield()  调用该方法的线程重回可执行状态 不会释放锁标记，可以理解为交出
                    CPU时间片  但是不一定有效果，因为有可能又被马上执行。该方法的真正作用是是具有相同或者更高
                    优先级的方法得到执行机会
                wait(timeout): wait方法通常notify()/notifyALl搭配使用，当前线程暂停执行 会释放锁标记
                    进入对象等待池，知道调用到notify()方法之后 线程被移动到锁标记等待池。
                    只有锁标记等待线程池的线程才能获得锁
            5)死亡状态  线程执行完了或者因一场退出了run()方法  该线程结束生命周期
    线程的锁：synchronized(锁对象)  锁对象是相同的对象  同一个对象
                1.    引用数据类型比较的是地址  == 比较的是相同的地址
                注意：如果是字符串作为锁对象不要使用new String()   而是直接使用字面值
                     如果是自定义对象 那么保证这个对象只在全局创建过一次  两次锁的同一个引用地址
                    String str1="aa";   字面值  常量池中
                    String str2 =new String("aa"); 一旦使用new关键字 则会创建对象  对象的引用栈中 实际对象在堆中

                2.锁的获取是有jvm决定的  用户无法手动操作
                  锁的释放也是jvm决定的
                3.synchronized什么时候会释放
                    1)获取锁对象的线程的代码执行完成  会自动释放
                    2)代码中抛出异常  则会终止线程执行 自动释放

            Lock 手动获取或者释放锁  是一个接口
                lock() 加锁   可以在代码的任意地方
                    添加的锁什么时候开始释放:除非排除异常或者手动释放  这个锁会一直存在
                    如果你释放锁 则会造成其他线程读不到锁  程序一直停在那里  必须要释放锁
                unlock()  释放锁  释放锁的代码最好放在finally中
                trylock()  试图获取锁  但是不一定获取得到  返回值是一个boolean类型的  true 代表获取锁成功  false代表获取锁失败
                            执行的过程中立马返回
                trylock(long time,TimeUnit unit):试图获取锁  会给一个时间限制  如果在给定的时间内能够获取得到 返回tue  否则返回false
                lockInterruptibly()  locak  锁  Interrupt 打断 bly
                    这种锁允许中途打断


