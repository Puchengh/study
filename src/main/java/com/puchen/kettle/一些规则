XPath-路劲表达式-示例
    路径表达式           结果
    bookstore       选取bookstore元素的所有子节点
    /bookstore      选取根元素的bookstore
    bookstore/book  选取属于bookstore的子元素的所有book元素
    //book          选取所有book子元素，而不管他们在文档中的位置
    bookstore//book 选择属于bookstore元素的后代的所有book元素，二不管他们位于nookstore直线的什么位置
    //@lang         选取名为lang的所有属性

JSONPath
    JSONPath表达式通常是用来路径检索或设置的Json的
    点记法：$.store.book[0].title
    括号记法：$['store']['book'][0]['title']

  JSONPath-操作符
        符号                      描述
         $               查询的根节点对象，用于表示一个json数据，可以是数组或者对象
         @               过滤器断言(filter predicate)处理的当前节点对象，类似于java中的this字段
         *               通配符，可以表示一个名字或者数字
         ..              可以理解为递归搜索，Deep sca.Available anywhere a name id required.
      .<name>            表示一个子节点
  ['<name>'(,'<name>')]  表示一个或者多个子节点、
  [<number>(,<number>)]  表示一个或者多个数组下标
      [start:end]        数组片段，区间问[start,end],不包含end
    [?(<expression>)]    过滤器表达式，表达式结果必须是boolean


HTTP client  使用get的方式提交请求，获取返回的页面的内容

合并记录
标志字段：设置标志字段的民称，标志字段用于保存比较的结果，比较结果又下列几种
    1."identical" -- 旧数据和新数据一样
    2."changed" -- 数据发生了变化
    3."new" -- 新数据中有而旧数据中没有的记录
    4."deleted" --旧数据中有而新数据中没有的记录
关键字段:用于定位两个数据源中的同一条记录
比较字段:对于两个数据园中的同一条记录中，指定需要比较的字段
    合并后的数据将包括旧数据来源和新数据来源里的所有数据，对于变化的数据，
    使用新数据代替旧数据，同事在结果里用一个标示字段，来指定新旧数据的比较结果.
注意:
    旧数据和新数据需要实现按照关键字段排序
    旧数据和新数据要有相同的字段名称。
javascript脚本
    javascript脚本就是使用javascript语言通过代码编程完成对数据流的操作，
    js中有很多内置函数，可以在编写js代码时查看

    存在两种不同的模式：不兼容模式和兼容模式
                    不兼容模式：是默认的 也是推荐的
                            myVar = fileName;
                            FileName = myVar;
                            使用java类
                            var myVar  = new java.loan.String("peng.com");
                    兼容模式：兼容老版本的kettle
                            myVar = FiledName.getString();
                            myVar = FiledName.getNumber();
                            FieldName.setValue(myVar);
                            使用java类
                            var myVar = new Packages.java.lang.String("peng.com");

作业
    大多数ETL项目都需要完成各种各样的维护工作
    例如  如何传送文件  验证数据库表是否存在，等等 而这些操作都是按照一定顺序完成。因为转换以并行方式执行，
    就需要一个可以串行执行的作业来处理这些操作
    一个作业包含一个或者多个作业项，这些作业项以某种顺序来执行，作业执行顺讯由作业项之间的跳和每个作业项的执行结果来决定的.

作业项
    作业项是作业的基本构成部分，如同转换的步骤。作业项也可以使用图表的方式图形化展示
    在作业项之间可以传递一个结果对象，这个结果对象里面包含了数据行，它们不是一数据流的方式来传递的，而是等待一个作业项执行完了
    在传递个下一个作业项
    因为作业顺序执行作业项，所以必须定义一个起点，有一个叫“开始”的作业项就定义了这个点。一个作业只能顶一个开始作业项
作业跳
    作业的跳是作业项之间的连接线，她定义了作业的执行路径，作业里每个作业项的不同运行结果过决定了做作业的不同的执行路径。
    1 无条件执行 不论上一个作业项执行成功了还是失败了 下一个作业都会执行，这是一种蓝色的连接线，上面有一个锁的图表
    2 当运行结果为真的时候执行，当上一个作业项的执行结果为真的时候，执行下一个作业项。通常在需要无错误执行的情况下使用。
    这是一种绿色的连接线，上面有一个对钩号的图表。
    3 挡运行结果为假的时候执行，当上一个作业项的执行结果为假或者没有成功执行的时候，执行下一个作业项。这是一种红色的连接线，
    上面有一个红色的停止图表。

局部参数
    局部参数变量是通过"set variables"与"get variables"方式来设置
    注意：在set variables 时在当前转换中是不能马上使用的，需要在作业中的下一个步骤中使用。

参数的使用
    Kettle中参数使用方法有两种，一种是%%变量名%%，一种是${变量名}
    注意：在sql中使用变量时需要把"是否替换变量"勾选上，否则无法使变量生效。
常量传递
    常量传递就是先自定义常量数据，在表输入的SQL语句里面使用？来替换。
    ？号的替换顺序就是常量定义的顺序。
转换命名参数
    转换命名参数就是在转换内部定义的变量，作用范围是在转换内部。
    在转换的空白处右键，选择转换设置就可以看见

