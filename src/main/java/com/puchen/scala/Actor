什么是Actor
    Actor是消息并发类型
    Scala中的Actor能够实现并行的强大功能，他是基于时间模型的并发机制
    Scala是运用消息message的发送  接受实现多线程
    使用Scala能够更容易地实现多线程应用的开发
java并发编程与Scala Actor编程的区别
    Scala的Actor类似于java中的多线程编程  但是不同的是 Scala的Actor提供的模型与多线程有所不同
    Scala的Actor尽可能的避免锁和共享状态，从而避免多线程并发是出现资源争用的情况 进而提升多线程编程的性能
    此外 Scala Actor的这种模型还可以避免死锁等一系列传统多线程编程的问题
    原因就在于java中多数使用的是可变状态的对象资源，对这些资源进行共享来实现多线程编程的话
    控制好资源竞争与防止对象状态被意外修改是非常重要的，而对象状态的不变性也是较难以保证的
    而在Scala中  我们可以通过赋值不可变状态的资源（即对象，scala中一切都是对象，连函数，方法也是）的一个副本
    在基于Actor的消息发送，接受机制进行并发编程
Actor方法执行顺序
    1.调用start()方法启动Actor
    2.执行 act()方法
    3.向Actor发送消息
发送消息的方式
    ！ --> 发送异步消息，没有返回值
    ！？ --> 发送同步消息，等待返回值
    ！！ ---> 发送异步消息，返回值是Future[Any]


